<!DOCTYPE html>
<html lang="pt">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Smart Escritura - 2º Tabelião</title>
</head>
<body>
    <h1>SMART ESCRITURA - COMPRA E VENDA</h1>
    <h3>Saldo de depósito: <span id="boxBalance">0</span> - <button onclick="valorDepositado()">Recarregar</button></h3>
    <hr>
    <form name="frmPayment" id="frmPayment" action="#" method="get" onsubmit="executePayment(); return false;">
        <div>
            <label for="motivation">O que você quer pagar? Digite 1 para imóvel, 2 para emolumentos ou 3 para o valor total: </label>
        </div>
        <div>
            <input type="text" name="motivation" id="motivation">
        </div>
        <div>
            <label for="amount">Digite o valor (em wei) a ser depositado na Smart Escritura: </label>
        </div>
        <div>
            <input type="number" name="amount" id="amount" value="1000000000000000"> wei
        </div>
        <div>
            &nbsp;
        </div>
        <div>
            <button type="submit">Confirmar Pagamento</button>
        </div>
        <div>
            &nbsp;
        </div>
        <div id="boxCommStatus">
            (Status da Blockchain)
        </div>
    </form>
    <script charset="utf-8"
        src="https://cdn.ethers.io/scripts/ethers-v4.min.js"
        type="text/javascript">
    </script>
    <script src="javascript/abi.js"></script>
    <script src="javascript/blockchain.js"></script>
    
    <script>
        valorDepositado();
        </script>
     
    
</body>
</html>





-----------------------------------





var contractAddress = "0xED64D13aE6b8C6332ccA95b427905c412f4a10D4";
var provider = new ethers.providers.Web3Provider(web3.currentProvider);
ethereum.enable();
var signer = provider.getSigner();
var contract = new ethers.Contract(contractAddress, contractAbi, signer);

function valorDepositado() {    
    var boxBalance = document.getElementById("boxBalance");
    console.log("valorDepositado - submitting the request");     
    contract.valorDepositado()
    .then( (resultFromContract) => {
        console.log("valorDepositado - result is", resultFromContract);
        boxBalance.innerHTML = resultFromContract;
    })
    .catch( (err) => {
        console.error(err);
        alert("A screen will be load asking to allow this page to connect with your Ethereum account.\nPlease give this permission to proceed.\nOr if you don't have an Ethereum account please install Metamask");
        ethereum.enable();
        alert("After you give the permission we are going to reload the page");
        document.location = "index.html";
    });
}

function executePayment() {
    var amount = document.frmPayment.amount.value;       
    if (amount<1000000000) {
        alert("You must pay a minimum of 1 gwei to the Contract");
        return false;
    }
    var motivation = document.frmPayment.motivation.value;
    var boxCommStatus = document.getElementById("boxCommStatus");
    boxCommStatus.innerHTML = "Sending transaction...";
    var additionalSettings = {
        value: ethers.utils.parseUnits(amount, 'wei')
    }; 
    contract.AssinarPagar(motivation, additionalSettings)
    .then( (tx) => {
        console.log("executePayment - Transaction ", tx);   
        boxCommStatus.innerHTML = "Transaction sent. Waiting for the result...";
        tx.wait()
        .then( (resultFromContract) => {
            console.log("executePayment - the result was ", resultFromContract);
            valorDepositado();
            boxCommStatus.innerHTML = "Transaction executed.";
        })        
        .catch( (err) => {
            console.error("executePayment - after tx being mint");
            console.error(err);
            boxCommStatus.innerHTML = "Algo saiu errado: " + err.message;
        })
    })
    .catch( (err) => {
        console.error("executePayment - tx has been sent");
        console.error(err);
        boxCommStatus.innerHTML = "Something went wrong: " + err.message;
    })
    
}


